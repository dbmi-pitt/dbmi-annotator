############################################################
Overview 
############################################################
DBMI-Annotator is a web based annotation tool that enable the creation of multiple annotation plugins in order to meet various use cases. In current release version, we narrow the scope specific to biomedical domain that drug mention annotation plugin and DDI (drug-drug interaction) annotation plugin are implemented for annotating drug interactions upon Dailymed drug product label and articles from set of publishers. The tool is extensible for adding more user scenarios as extra annotation plugins. Itâ€™s aiming for annotate any publicly accessible web resources including PDF documents, tables and figures on web page. 

For the implemented two plugins in this release, the drug mention annotation helps user to mark drug mention on the context. It could be occurrences of clinical drug, active ingredient, drug product, metabolite or drug group. DDI annotation is purpose for identify drug drug interaction information in a structured way upon plain text. Contents that related to the interaction on the page will be collected as evidence supports or refutes as well. 

Drug mention annotation is precondition of DDI annotation. They work as a partner. On the same sentence span, drug mention will be marked first in order to identify an interaction among drug mentions by DDI annotation plugin. An predesigned model called Micropublication is applied for DDI annotation. The claim that consist of drug mentions and their relation, such as interact with and inhibits, information will be created first. Afterwards, contents that related to the claim will be collected as Micropublication data/material with relation supports or refutes to the claim. 

############################################################
Licensing
############################################################
DBMI-Annotator is licensed under the Apache License, Version 2.0. See LICENSE for the full license text.


############################################################
How to run - Production
############################################################

(1) Install docker(v1.12.3), docker-compose (v1.8.1) and apache (v2.4) server

    Apache2 server configuration:

    ## DBMI-Annotator Docker configuration ###############################
    # proxy for docker exposed service at port 8085
    ProxyPass /dbmiannotator http://localhost:8085/dbmiannotator
    RewriteRule /dbmiannotator(.*) http://localhost:8085/dbmiannotator$1 [P]

    # proxy for docker exposed service at port 8085 for annotator store
    ProxyPass /annotatorstore http://localhost:8085/annotatorstore
    RewriteRule /annotatorstore(.*) http://localhost:8085/annotatorstore$1 [P]

    # stylesheet folder relocate at Document root(dailymed, PMC, wiley)
    RewriteRule /dbmiannotator/dailymed(.*) http://localhost/DDI-labels/dailymed$1 [P]
    RewriteRule /dbmiannotator/PMC(.*)_files/(.*) http://localhost/PMC/PMC$1_files/$2 [P]
    RewriteRule /dbmiannotator/wiley(.*)_files/(.*) http://localhost/wiley/wiley$1_files/$2 [P]

(2) Create local volume for postgres and elasticsearch data mount point

    $ docker volume create --name postgres-volume -d local
    $ docker volume create --name elasticsearch-volume -d local

(3) Run dbmi-annotator with all dependencies in docker container

    git clone 
    $ cd docker-dbmi-annotator/dbmi-annotator
    $ docker-compose up

Optional: pre-load annotations from csv to DB mpevidence 

    $ python loadDomeoAnnsToRDB.py <pghostname> <pgport> <pguser> <pgpassword> <clean existing data (1: yes, 0: no)>

    ex. $ python loadDomeoAnnsToRDB.py postgres 5432 dbmiannotator dbmi2016 1

    1. optional: clean all data in table
    2. preprocess csv, generate preprocess-domeo.csv
    3. load data into schema mpevidence

Optional: pre-load annotations from postgres DB mpevidence to elasticsearch

    $ docker exec -it dbmi-annotator bash
    $ cd translation/rdb-data-loader
    $ python load-rdb-annotations.py <pg hostname> <pg username> <pg password> <es hostname> <annotation author>

    ex. python load-rdb-annotations.py postgres dbmiannotator dbmi2016 elasticsearch test@gmail.com


For how to build production mode via docker:
https://github.com/dbmi-pitt/docker-dbmi-annotator/blob/master/README

############################################################
How to run - Devlopment
############################################################

--------------------------
Dependences:
--------------------------

1. Elasticsearch version 1.7 running on port 9250

2. Annotator Store running on port 5000

3. Postgres DB running on port 5432
   create database dbmiannotator

    SQL script that create dbmiannotator schema
    https://github.com/dbmi-pitt/dbmi-annotator/blob/master/db-script/dbmi-annotator/rdb-postgres-schema-04212016.sql 

    SQL script that initialize plugin settings
    https://github.com/dbmi-pitt/dbmi-annotator/blob/master/db-script/dbmi-annotator/rdb-postgres-initial-04182016.sql 

--------------------------
Installation:
--------------------------

1. nodejs packages
$ npm install

2. compile browser side JS packages (rerun when made modifications on config/config.js)
$ browserify app.js -o public/dbmiannotator/js/app.bundle.js

--------------------------
Configuration:
--------------------------

1.Create config.js 
$ cp config/config.sample.js config/config.js

2.Edit config.js based on system environment  

--------------------------
Run node server:
--------------------------

$ cd dbmi-annotator
$ nodemon server.js

access to 'http://localhost:3000/'

############################################################
Directories
############################################################

-------------------------------------------------------------
Nodejs based program - folder structures
-------------------------------------------------------------
config/ - configurations
models/ - represents data, implements business logic and handles storage
controllers/ - defines your app routes and their logic
public/ - contains all static files like images, styles and javascript
views/ - provides templates which are rendered and served by your routes
server.js - initializes the app and glues everything together
package.json - remembers all packages that your app depends on and their versions

reference: https://www.terlici.com/2014/08/25/best-practices-express-structure.html

-------------------------------------------------------------
design/ 
-------------------------------------------------------------
(1) design/diagram-workspaces/
keep source code of diagram

pencil prototyping tool: *.ep
dia: *.dia
yEd: *.graphml

(2) design/images/
exported images for software design



